<?xml version="1.0" encoding="UTF-8"?>
<assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p1"
    
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:ma="http://mathassess.qtitools.org/xsd/mathassess"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" adaptive="true"
    identifier="mela011015" timeDependent="false"
    title="Expand (ax+b)(cx+d)" toolName="Mathqurate" toolVersion="1.0"
    xml:lang=""
    xsi:schemaLocation="http://www.imsglobal.org/xsd/imsqti_v2p1 imsqti_v2p1.xsd http://mathassess.qtitools.org/xsd/mathassess mathassess.xsd">
    <responseDeclaration cardinality="record" identifier="RESPONSE"/>
    <responseDeclaration baseType="string" cardinality="single" identifier="printMath"/>
    <responseDeclaration baseType="boolean" cardinality="single" identifier="HINTREQUEST"/>
    <responseDeclaration baseType="boolean" cardinality="single" identifier="SOLREQUEST"/>
    <outcomeDeclaration baseType="identifier" cardinality="multiple" identifier="FEEDBACK"/>
    <outcomeDeclaration baseType="identifier" cardinality="single" identifier="EMPTY"/>
    <outcomeDeclaration baseType="float" cardinality="single" identifier="SCORE" normalMaximum="2.0"
        normalMinimum="0.0">
        <defaultValue>
            <value>0 </value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="seenSolution">
        <defaultValue>
            <value>false</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="seenHint">
        <defaultValue>
            <value>false</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration baseType="identifier" cardinality="single" identifier="ASKHINT">
        <defaultValue>
            <value>askhint</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration baseType="identifier" cardinality="single" identifier="ASKSOLUTION">
        <defaultValue>
            <value>asksolution</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration cardinality="record" identifier="oInput"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="odummy"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="polyOK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="isEquiv"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="termsOK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="constOK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="isEqual"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="isExpanded"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t1OK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t2OK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t3OK"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t1BadSign"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t2BadSign"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t3BadSign"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t1Zero"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t2Zero"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t3Zero"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t1One"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t2One"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="t3One"/>
    <outcomeDeclaration baseType="boolean" cardinality="single" identifier="constOne"/>
    <outcomeDeclaration baseType="integer" cardinality="single" identifier="nResp"/>
    <outcomeDeclaration baseType="integer" cardinality="single" identifier="nAns"/>
    <outcomeDeclaration baseType="integer" cardinality="single" identifier="iRcoeffx2"/>
    <outcomeDeclaration baseType="integer" cardinality="single" identifier="iRcoeffx"/>
    <outcomeDeclaration baseType="integer" cardinality="single" identifier="iRconst"/>
    <templateDeclaration baseType="boolean" cardinality="single" identifier="keepRandomSeed"
        mathVariable="false" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iRandomSeed"
        mathVariable="false" paramVariable="false"/>
    <templateDeclaration baseType="boolean" cardinality="single" identifier="dummy"
        mathVariable="false" paramVariable="false"/>
    <templateDeclaration baseType="identifier" cardinality="multiple" identifier="showSolParts"
        mathVariable="false" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iA" mathVariable="true"
        paramVariable="false">
        <defaultValue>
            <value>2</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iB" mathVariable="true"
        paramVariable="false">
        <defaultValue>
            <value>-3</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iC" mathVariable="true"
        paramVariable="false">
        <defaultValue>
            <value>3</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iD" mathVariable="true"
        paramVariable="false">
        <defaultValue>
            <value>5</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsAC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignAC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsAD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignAD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iBD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsBD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignBD"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iADpBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsADpBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="string" cardinality="single" identifier="sSignADpBC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mX1" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mACX2" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mADX" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBCX" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mADpBCX" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mQues" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mAns" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mSol1" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mSol2" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mSol3" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mFac1" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mFac2" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mT1" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mT2" mathVariable="true"
        paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="ordered" identifier="iRandomState"
        mathVariable="false" paramVariable="false"/>
    <templateProcessing>
        <setTemplateValue identifier="iA">
            <randomInteger min="2" max="9"/>
        </setTemplateValue>
        <setTemplateValue identifier="iB">
            <product>
                <randomInteger min="1" max="6"/>
                <randomInteger min="-1" max="1" step="2"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iC">
            <randomInteger min="2" max="9"/>
        </setTemplateValue>
        <setTemplateValue identifier="iD">
            <product>
                <randomInteger min="1" max="6"/>
                <randomInteger min="-1" max="1" step="2"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iAC">
            <product>
                <variable identifier="iA"/>
                <variable identifier="iC"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iBC">
            <product>
                <variable identifier="iB"/>
                <variable identifier="iC"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iAD">
            <product>
                <variable identifier="iA"/>
                <variable identifier="iD"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iBD">
            <product>
                <variable identifier="iB"/>
                <variable identifier="iD"/>
            </product>
        </setTemplateValue>
        <setTemplateValue identifier="iADpBC">
            <sum>
                <variable identifier="iAD"/>
                <variable identifier="iBC"/>
            </sum>
        </setTemplateValue>
        <templateConstraint>
            <not>
                <equal toleranceMode="exact">
                    <variable identifier="iADpBC"/>
                    <baseValue baseType="integer">0</baseValue>
                </equal>
            </not>
        </templateConstraint>
        <setTemplateValue identifier="iAbsB">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iB"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iB"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignB">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignB">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsD">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iD"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iD"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignD">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignD">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsAC">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iAC"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iAC"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignAC">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignAC">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsBC">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iBC"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iBC"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignBC">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignBC">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsAD">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iAD"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iAD"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignAD">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignAD">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsBD">
            <round>
                <mathOperator name="abs">
                    <variable identifier="iBD"/>
                </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iBD"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignBD">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignBD">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="iAbsADpBC">
            <round>
                 <mathOperator name="abs">
                     <variable identifier="iADpBC"/>
                 </mathOperator>
            </round>
        </setTemplateValue>
        <templateCondition>
            <templateIf>
                <gte>
                    <variable identifier="iADpBC"/>
                    <baseValue baseType="integer">0</baseValue>
                </gte>
                <setTemplateValue identifier="sSignADpBC">
                    <baseValue baseType="string">+</baseValue>
                </setTemplateValue>
            </templateIf>
            <templateElse>
                <setTemplateValue identifier="sSignADpBC">
                    <baseValue baseType="string">-</baseValue>
                </setTemplateValue>
            </templateElse>
        </templateCondition>
        <setTemplateValue identifier="dummy">
            <customOperator class="org.qtitools.mathassess.ScriptRule" ma:syntax="text/x-maxima">
                <baseValue baseType="string"><![CDATA[

 s1 : make_random_state(true)$ set_random_state(s1);

 aa: ev(random(13),simp);

 array(aarr1,15);

 fillarray(aarr1,[a,b,c,d,m,n,p,q,r,s,t,u,v,w,x,y]);

 mX1:aarr1[aa];

 mT1:ev(iA*mX1,simp);

 mT2:ev(iC*mX1,simp);
 mACX2:ev(iAC*mX1^2,simp);
 mADX:ev(iAD*mX1,simp);
 mBCX:ev(iBC*mX1,simp);
 mADpBCX:ev(iADpBC*mX1,simp);
 simp:false;
 mFac1:ev(iA*mX1+iB,simp);
 mFac2:ev(iC*mX1+iD,simp);
 mSol1: mT1*(mFac2)+(iB)*(mFac2);
 mSol2: mACX2+(mADX)+(mBCX)+(iBD);
 mSol3: mACX2+(mADpBCX)+(iBD);

 mQues:(mFac1)*(mFac2);

 mAns:ev(ev(expand(mQues),simp),simp);

]]></baseValue>
            </customOperator>
        </setTemplateValue>
    </templateProcessing>
    <itemBody>
        <p>Write the following expression without using brackets 
            <m:math display="block">
                <m:mrow>
                    <m:mo>(</m:mo>
                    <m:mi>mFac1</m:mi>
                    <m:mo>)</m:mo>
                </m:mrow>
                <m:mrow>
                    <m:mo>(</m:mo>
                    <m:mi>mFac2</m:mi>
                    <m:mo>)</m:mo>
                </m:mrow>
            </m:math>
        </p>
        <div>
            <customInteraction class="org.qtitools.mathassess.MathEntryInteraction"
                ma:expectedLength="20" ma:printIdentifier="printMath" ma:syntax="text/x-maxima"
                responseIdentifier="RESPONSE"/>
        </div>
        <div>
            <feedbackInline identifier="CORRECT" outcomeIdentifier="FEEDBACK" showHide="show">
                Correct </feedbackInline>
            <feedbackInline identifier="CORRECT2" outcomeIdentifier="FEEDBACK" showHide="show"> Your
                answer is correct </feedbackInline>
            <feedbackInline identifier="CORRECT3" outcomeIdentifier="FEEDBACK" showHide="show"> OK </feedbackInline>
            <feedbackInline identifier="CORRECT-ORD" outcomeIdentifier="FEEDBACK" showHide="show">
                Your answer is correct, but it would be more usual to write
                it in the form <printedVariable identifier="mAns"/> . </feedbackInline>
            <feedbackInline identifier="NOT-ALL-MULT" outcomeIdentifier="FEEDBACK" showHide="show">
                Remember that, when expanding brackets, all terms inside must be multiplied by
                whatever is outside. However, you got one term in the answer correct, so 1 mark. </feedbackInline>
            <feedbackInline identifier="ORIG-EXPR" outcomeIdentifier="FEEDBACK" showHide="show">
                Your input is the same as the original expression! </feedbackInline>
            <feedbackInline identifier="NOT-SIMP" outcomeIdentifier="FEEDBACK" showHide="show"> Your
                answer is correct but is not in simplified form. </feedbackInline>
            <feedbackInline identifier="T1OK" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:msup>
                        <m:mi>mX1</m:mi>
                        <m:mn>2</m:mn>
                    </m:msup>
                </m:math>
                &#160;is correct. 
            </feedbackInline>
            <feedbackInline identifier="T2OK" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:mi>mX1</m:mi>
                </m:math>
                &#160;is correct. 
            </feedbackInline>
            <feedbackInline identifier="T3OK" outcomeIdentifier="FEEDBACK" showHide="show"> The constant term is correct. 
            </feedbackInline>
            <feedbackInline identifier="T1SIGN" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:msup>
                        <m:mi>mX1</m:mi>
                        <m:mn>2</m:mn>
                    </m:msup>
                </m:math>
                &#160;has the wrong sign. 
            </feedbackInline>
            <feedbackInline identifier="T2SIGN" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:mi>mX1</m:mi>
                </m:math>
                &#160;has the wrong sign. 
            </feedbackInline>
            <feedbackInline identifier="T3SIGN" outcomeIdentifier="FEEDBACK" showHide="show"> The constant term has the wrong sign. 
            </feedbackInline>
            <feedbackInline identifier="T1BAD" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:msup>
                        <m:mi>mX1</m:mi>
                        <m:mn>2</m:mn>
                    </m:msup>
                </m:math>
                &#160;is incorrect. 
            </feedbackInline>
            <feedbackInline identifier="T2BAD" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:mi>mX1</m:mi>
                </m:math>
                &#160;is incorrect. 
            </feedbackInline>
            <feedbackInline identifier="T3BAD" outcomeIdentifier="FEEDBACK" showHide="show"> The constant term is incorrect. 
            </feedbackInline>
            <feedbackInline identifier="T1ZERO" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:msup>
                        <m:mi>mX1</m:mi>
                        <m:mn>2</m:mn>
                    </m:msup>
                </m:math>
                &#160;is missing. 
            </feedbackInline>
            <feedbackInline identifier="T2ZERO" outcomeIdentifier="FEEDBACK" showHide="show"> The term in&#160;
                <m:math>
                    <m:mi>mX1</m:mi>
                </m:math>
                &#160;is missing. 
            </feedbackInline>
            <feedbackInline identifier="T3ZERO" outcomeIdentifier="FEEDBACK" showHide="show"> The constant term is missing. 
            </feedbackInline>
            <feedbackInline identifier="INCORRECT" outcomeIdentifier="FEEDBACK" showHide="show"> You
                should ask for tutor help on this question. </feedbackInline>
        </div>
        <feedbackBlock id="feedbackBlock4" identifier="THREETRIES"
            outcomeIdentifier="FEEDBACK" showHide="show">
            <p> You have had three attempts at answering this question, so here is the
                solution: </p>
        </feedbackBlock>
        <feedbackBlock identifier="SOLUTION" outcomeIdentifier="FEEDBACK" showHide="show">
            <div>
                <p>By the distributive law, each term inside the second bracket must be multiplied by
                    each term in the first bracket: </p>
                <p>
                    <m:math display="block" id="mathML0">
                        <m:semantics>
                            <m:mtable>
                                <m:mtr>
                                    <m:mtd columnalign="right">
                                        <m:mrow>
                                            <m:mo>(</m:mo>
                                            <m:mi>mFac1</m:mi>
                                            <m:mo>)</m:mo>
                                        </m:mrow>
                                        <m:mrow>
                                            <m:mo>(</m:mo>
                                            <m:mi>mFac2</m:mi>
                                            <m:mo>)</m:mo>
                                        </m:mrow>
                                    </m:mtd>
                                    <m:mtd columnalign="center">
                                        <m:mo>=</m:mo>
                                    </m:mtd>
                                    <m:mtd columnalign="left">
                                        <m:mi>mSol1</m:mi>
                                    </m:mtd>
                                </m:mtr>
                                <m:mtr>
                                    <m:mtd columnalign="right"/>
                                    <m:mtd columnalign="center">
                                        <m:mo>=</m:mo>
                                    </m:mtd>
                                    <m:mtd columnalign="left">
                                        <m:mi>mSol2</m:mi>
                                    </m:mtd>
                                </m:mtr>
                                <m:mtr>
                                    <m:mtd columnalign="right"/>
                                    <m:mtd columnalign="center">
                                        <m:mo>=</m:mo>
                                    </m:mtd>
                                    <m:mtd columnalign="left">
                                        <m:mi>mSol3</m:mi>
                                    </m:mtd>
                                </m:mtr>
                                <m:mtr>
                                    <m:mtd columnalign="right"/>
                                    <m:mtd columnalign="center">
                                        <m:mo>=</m:mo>
                                    </m:mtd>
                                    <m:mtd columnalign="left">
                                        <m:mi>mAns</m:mi>
                                    </m:mtd>
                                </m:mtr>
                            </m:mtable>
                            <m:annotation encoding="SnuggleTeX">\begin{eqnarray}(\qv{mFac1})(\qv{mFac2}) &amp;=&amp;
                                \qv{mSol1}
                                \\ &amp;=&amp; \qv{mSol2}
                                \\ &amp;=&amp; \qv{mSol3}
                                \\ &amp;=&amp; \qv{mAns}
                                \end</m:annotation>
                        </m:semantics>
                    </m:math>
                </p>
            </div>
        </feedbackBlock>
        <feedbackBlock identifier="HINT" outcomeIdentifier="FEEDBACK" showHide="show">
            <p>Remember that all terms inside the second bracket must be multiplied by each term in the first bracket.</p>
        </feedbackBlock>
        <feedbackBlock identifier="SEEN-SOLUTION" outcomeIdentifier="FEEDBACK" showHide="show">
            <p>Since you have viewed the solution, your score for this question will be 0.</p>
        </feedbackBlock>
        <feedbackBlock identifier="SEEN-HINT" outcomeIdentifier="FEEDBACK" showHide="show">
            <p>Since you have viewed the hint, your score for this question will be halved.</p>
        </feedbackBlock>
        <feedbackBlock id="feedbackBlock7" identifier="askhint" outcomeIdentifier="ASKHINT"
            showHide="show">
            <p>
                <endAttemptInteraction id="endAttemptInteraction1" responseIdentifier="HINTREQUEST"
                    title="Show Hint"/>
            </p>
        </feedbackBlock>
        <feedbackBlock id="feedbackBlock8" identifier="asksolution" outcomeIdentifier="ASKSOLUTION"
            showHide="show">
            <p>
                <endAttemptInteraction id="endAttemptInteraction2" responseIdentifier="SOLREQUEST"
                    title="Show Solution"/>
            </p>
        </feedbackBlock>
    </itemBody>
    <responseProcessing>
        <setOutcomeValue identifier="FEEDBACK">
            <multiple>
                <variable identifier="EMPTY"/>
            </multiple>
        </setOutcomeValue>
        <responseCondition>
            <responseIf>
                <variable identifier="HINTREQUEST"/>
                <setOutcomeValue identifier="FEEDBACK">
                    <multiple>
                        <baseValue baseType="identifier">HINT</baseValue>
                    </multiple>
                </setOutcomeValue>
                <setOutcomeValue identifier="seenHint">
                    <baseValue baseType="boolean">true</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="ASKHINT">
                    <baseValue baseType="identifier">null</baseValue>
                </setOutcomeValue>
            </responseIf>
            <responseElseIf>
                <variable identifier="SOLREQUEST"/>
                <setOutcomeValue identifier="FEEDBACK">
                    <multiple>
                        <baseValue baseType="identifier">SOLUTION</baseValue>
                    </multiple>
                </setOutcomeValue>
                <setOutcomeValue identifier="seenSolution">
                    <baseValue baseType="boolean">true</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="ASKHINT">
                    <baseValue baseType="identifier">null</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="ASKSOLUTION">
                    <baseValue baseType="identifier">null</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="completionStatus">
                    <baseValue baseType="identifier">completed</baseValue>
                </setOutcomeValue>
            </responseElseIf>
            <responseElse>
                <responseCondition>
                    <responseIf>
                        <isNull>
                            <variable identifier="RESPONSE"/>
                        </isNull>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">0</baseValue>
                        </setOutcomeValue>
                    </responseIf>
                    <responseElseIf>
                        <customOperator class="org.qtitools.mathassess.CasCompare"
                            ma:action="syntequal" ma:simplify="false" ma:syntax="text/x-maxima">
                            <variable identifier="RESPONSE"/>
                            <variable identifier="mQues"/>
                        </customOperator>
                        <setOutcomeValue identifier="FEEDBACK">
                            <multiple>
                                <baseValue baseType="identifier">ORIG-EXPR</baseValue>
                            </multiple>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">0</baseValue>
                        </setOutcomeValue>
                    </responseElseIf>
                    <responseElseIf>
                        <customOperator class="org.qtitools.mathassess.CasCompare"
                            ma:action="syntequal" ma:simplify="false" ma:syntax="text/x-maxima">
                            <variable identifier="RESPONSE"/>
                            <variable identifier="mAns"/>
                        </customOperator>
                        <setOutcomeValue identifier="FEEDBACK">
                            <multiple>
                                <baseValue baseType="identifier">CORRECT</baseValue>
                            </multiple>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">2</baseValue>
                        </setOutcomeValue>
                    </responseElseIf>
                    <responseElse>
                        <setOutcomeValue identifier="odummy">
                            <customOperator class="org.qtitools.mathassess.ScriptRule"
                                ma:simplify="false" ma:syntax="text/x-maxima">
                                <baseValue baseType="string"><![CDATA[

 termsOK : true;

 polyOK: block([simp:true], if polynomialp(RESPONSE,listofvars(mAns))then true else false );

 equalp(p,q):= block([simp:false], if p=q then return(true) else return(false) )$ isEqual: is(equalp(RESPONSE,mAns)=true);

 equivp(p,q):= block([simp:true], if is(equal(p,q))=true then return(true) else return(false) )$ isEquiv: is(equivp(RESPONSE,mAns)=true);

 expandp(q):= block([simp:true], if q=expand(q) then true else false)$ isExpanded: is(expandp(RESPONSE)=true);

 includesp(sub, term) := if some(lambda([e],is(equal(ev(e - sub,simp),0))),makelist(part(term,i),i,1,length(term)))=true then true else false;

 nResp:nterms(RESPONSE);
 nAns:nterms(mAns);
 termsOK:is(is(nResp=nAns)=true);

 iRcoeffx2:ev(coeff(RESPONSE,mX1,2),simp);
 iRcoeffx:ev(coeff(RESPONSE,mX1),simp);
 iRconst:ev(coeff(RESPONSE,mX1,0),simp);
 
 t1OK:is(is(ev(iRcoeffx2-iAC,simp)=0)=true);
 t2OK:is(is(ev(iRcoeffx-iADpBC,simp)=0)=true);
 t3OK:is(is(ev(iRconst-iBD,simp)=0)=true);
 
 t1BadSign:is(is(ev(iRcoeffx2+iAC,simp)=0)=true);
 t2BadSign:is(is(ev(iRcoeffx+iADpBC,simp)=0)=true);
 t3BadSign:is(is(ev(iRconst+iBD,simp)=0)=true);
 
 t1Zero:is(is(iRcoeffx2=0)=true);
 t2Zero:is(is(iRcoeffx=0 and not(iAC=0))=true);
 t3Zero:is(is(iRconst=0)=true);

 oInput:RESPONSE;

 

]]></baseValue>
                            </customOperator>
                        </setOutcomeValue>
                        <responseCondition>
                            <responseIf>
                                <variable identifier="isEqual"/>
                                <setOutcomeValue identifier="SCORE">
                                    <baseValue baseType="float">2</baseValue>
                                </setOutcomeValue>
                                <setOutcomeValue identifier="FEEDBACK">
                                    <multiple>
                                        <baseValue baseType="identifier">CORRECT2</baseValue>
                                    </multiple>
                                </setOutcomeValue>
                            </responseIf>
                            <responseElseIf>
                                <variable identifier="polyOK"/>
                                <responseCondition>
                                    <responseIf>
                                        <variable identifier="isEquiv"/>
                                        <responseCondition>
                                            <responseIf>
                                                <variable identifier="isExpanded"/>
                                                <responseCondition>
                                                    <responseIf>
                                                        <variable identifier="termsOK"/>
                                                        <setOutcomeValue identifier="SCORE">
                                                            <baseValue baseType="float">2</baseValue>
                                                        </setOutcomeValue>
                                                        <setOutcomeValue identifier="FEEDBACK">
                                                            <multiple>
                                                                <baseValue baseType="identifier">CORRECT3</baseValue>
                                                            </multiple>
                                                        </setOutcomeValue>
                                                    </responseIf>
                                                    <responseElse>
                                                        <setOutcomeValue identifier="FEEDBACK">
                                                            <multiple>
                                                                <baseValue baseType="identifier">NOT-SIMP</baseValue>
                                                            </multiple>
                                                        </setOutcomeValue>
                                                        <setOutcomeValue identifier="SCORE">
                                                            <baseValue baseType="float">1</baseValue>
                                                        </setOutcomeValue>
                                                    </responseElse>
                                                </responseCondition>
                                            </responseIf>
                                            <responseElse>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <baseValue baseType="identifier">NOT-EXPANDED</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                                <setOutcomeValue identifier="SCORE">
                                                    <baseValue baseType="float">0</baseValue>
                                                </setOutcomeValue>
                                            </responseElse>
                                        </responseCondition>
                                    </responseIf>
                                    <responseElse>
                                        <setOutcomeValue identifier="FEEDBACK">
                                            <multiple>
                                                <baseValue baseType="identifier">IS-POLY</baseValue>
                                            </multiple>
                                        </setOutcomeValue>
                                        <setOutcomeValue identifier="SCORE">
                                            <baseValue baseType="float">0</baseValue>
                                        </setOutcomeValue>
                                        <responseCondition>
                                            <responseIf>
                                                <variable identifier="t1OK"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T1OK</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                                <setOutcomeValue identifier="SCORE">
                                                    <sum>
                                                        <variable identifier="SCORE"/>
                                                        <baseValue baseType="float">1</baseValue>
                                                    </sum>
                                                </setOutcomeValue>
                                            </responseIf>
                                            <responseElseIf>
                                                <variable identifier="t1Zero"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T1ZERO</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElseIf>
                                                <variable identifier="t1BadSign"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T1SIGN</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElse>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier"
                                                            >T1BAD</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElse>
                                        </responseCondition>
                                        <responseCondition>
                                            <responseIf>
                                                <variable identifier="t2OK"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T2OK</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                                <setOutcomeValue identifier="SCORE">
                                                    <sum>
                                                        <variable identifier="SCORE"/>
                                                        <baseValue baseType="float">1</baseValue>
                                                    </sum>
                                                </setOutcomeValue>
                                            </responseIf>
                                            <responseElseIf>
                                                <variable identifier="t2Zero"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T2ZERO</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElseIf>
                                                <variable identifier="t2BadSign"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T2SIGN</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElse>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T2BAD</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElse>
                                        </responseCondition>
                                        <responseCondition>
                                            <responseIf>
                                                <variable identifier="t3OK"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T3OK</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                                <setOutcomeValue identifier="SCORE">
                                                    <sum>
                                                        <variable identifier="SCORE"/>
                                                        <baseValue baseType="float">1</baseValue>
                                                    </sum>
                                                </setOutcomeValue>
                                            </responseIf>
                                            <responseElseIf>
                                                <variable identifier="t3Zero"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T3ZERO</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElseIf>
                                                <variable identifier="t3BadSign"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T3SIGN</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElseIf>
                                            <responseElse>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">T3BAD</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseElse>
                                        </responseCondition>
                                        <responseCondition>
                                            <responseIf>
                                                <variable identifier="constOne"/>
                                                <setOutcomeValue identifier="FEEDBACK">
                                                    <multiple>
                                                        <variable identifier="FEEDBACK"/>
                                                        <baseValue baseType="identifier">CONST-ONE</baseValue>
                                                    </multiple>
                                                </setOutcomeValue>
                                            </responseIf>
                                        </responseCondition>
                                    </responseElse>
                                </responseCondition>
                            </responseElseIf>
                            <responseElse>
                                <setOutcomeValue identifier="FEEDBACK">
                                    <multiple>
                                        <baseValue baseType="identifier">INCORRECT</baseValue>
                                    </multiple>
                                </setOutcomeValue>
                                <setOutcomeValue identifier="SCORE">
                                    <baseValue baseType="float">0</baseValue>
                                </setOutcomeValue>
                            </responseElse>
                        </responseCondition>
                    </responseElse>
                </responseCondition>
                <responseCondition>
                    <responseIf>
                        <variable identifier="seenSolution"/>
                        <setOutcomeValue identifier="FEEDBACK">
                            <multiple>
                                <variable identifier="FEEDBACK"/>
                                <baseValue baseType="identifier">SEEN-SOLUTION</baseValue>
                            </multiple>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">0.0</baseValue>
                        </setOutcomeValue>
                    </responseIf>
                    <responseElseIf>
                        <variable identifier="seenHint"/>
                        <setOutcomeValue identifier="FEEDBACK">
                            <multiple>
                                <variable identifier="FEEDBACK"/>
                                <baseValue baseType="identifier">SEEN-HINT</baseValue>
                            </multiple>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <divide>
                                <variable identifier="SCORE"/>
                                <baseValue baseType="float">2.0</baseValue>
                            </divide>
                        </setOutcomeValue>
                    </responseElseIf>
                </responseCondition>
                <responseCondition>
                    <responseIf>
                        <gt>
                            <variable identifier="numAttempts"/>
                            <baseValue baseType="integer">3</baseValue>
                        </gt>
                        <setOutcomeValue identifier="FEEDBACK">
                            <multiple>
                                <baseValue baseType="identifier">THREETRIES</baseValue>
                                <baseValue baseType="identifier">SOLUTION</baseValue>
                            </multiple>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="completionStatus">
                            <baseValue baseType="identifier">completed</baseValue>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="ASKHINT">
                            <baseValue baseType="identifier">null</baseValue>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="ASKSOLUTION">
                            <baseValue baseType="identifier">null</baseValue>
                        </setOutcomeValue>
                    </responseIf>
                </responseCondition>
            </responseElse>
        </responseCondition>
    </responseProcessing>
</assessmentItem>
